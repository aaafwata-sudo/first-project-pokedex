<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Pokédex — Generación 1 (001–151)</title>
  <meta name="description" content="Pokédex interactiva de la primera generación (Kanto). Lista, búsqueda, filtros y modo oscuro. Listo para GitHub Pages." />
  <link rel="icon" href="data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 64 64'%3E%3Ccircle cx='32' cy='32' r='30' fill='%23ff1c1c'/%3E%3Cpath d='M2 32h60' stroke='%23000' stroke-width='6'/%3E%3Ccircle cx='32' cy='32' r='10' fill='%23fff' stroke='%23000' stroke-width='4'/%3E%3C/svg%3E" />
  <style>
    :root{
      --bg: #0b1020;
      --panel: #121832;
      --card: #0f1430;
      --text: #e7ebff;
      --muted: #9aa3c7;
      --brand: #ff3b3b;
      --ring: #5b7cff;
      --chip: #1b2246;
      --shadow: 0 10px 30px rgba(0,0,0,.35);
    }
    :root.light{
      --bg: #f6f8ff;
      --panel: #ffffff;
      --card: #ffffff;
      --text: #0a0d1a;
      --muted: #5a637e;
      --brand: #e11d48;
      --ring: #3b82f6;
      --chip: #eef2ff;
      --shadow: 0 10px 24px rgba(7, 11, 40, .08);
    }
    *{box-sizing:border-box}
    html,body{height:100%}
    body{
      margin:0; font-family: ui-sans-serif, system-ui, -apple-system, Segoe UI, Roboto, Ubuntu, Cantarell, 'Helvetica Neue', Arial;
      background: radial-gradient(1200px 700px at 20% -10%, rgba(91,124,255,.18), transparent 40%),
                  radial-gradient(1200px 700px at 100% -20%, rgba(225,29,72,.20), transparent 45%),
                  var(--bg);
      color:var(--text);
    }
    header{
      position:sticky; top:0; z-index:10;
      backdrop-filter: saturate(1.2) blur(8px);
      background: linear-gradient(to bottom, rgba(11,16,32,.7), rgba(11,16,32,.35));
      border-bottom: 1px solid rgba(255,255,255,.06);
    }
    .wrap{max-width:1100px; margin:0 auto; padding:16px 20px}
    .title{display:flex; gap:14px; align-items:center}
    .title .ball{width:32px;height:32px;border-radius:50%;background:conic-gradient(#ff4747 0 50%, #fff 0 100%);border:2px solid #000;box-shadow: inset 0 0 0 2px #fff, inset 0 0 0 6px #000}
    h1{font-size: clamp(20px, 3vw, 28px); margin:0; letter-spacing:.2px}
    .controls{display:grid; grid-template-columns: 1fr 140px 160px 44px; gap:10px; margin-top:12px}
    .control{display:flex; align-items:center; gap:8px; background:var(--panel); border:1px solid rgba(255,255,255,.08); padding:10px 12px; border-radius:14px; box-shadow: var(--shadow)}
    .control input,.control select{width:100%; background:transparent; border:none; outline:none; color:var(--text); font-size:14px}
    .btn{display:inline-flex; align-items:center; justify-content:center; gap:8px; padding:10px 12px; border-radius:14px; border:1px solid rgba(255,255,255,.08); background:var(--panel); color:var(--text); cursor:pointer; box-shadow: var(--shadow)}
    .btn:hover{transform:translateY(-1px)}

    main .grid{display:grid; grid-template-columns: repeat(auto-fill, minmax(220px, 1fr)); gap:14px; padding:18px 20px; max-width:1100px; margin:0 auto}
    .card{position:relative; background: linear-gradient(180deg, rgba(255,255,255,.03), transparent 35%), var(--card); border:1px solid rgba(255,255,255,.08); border-radius:22px; overflow:hidden; box-shadow: var(--shadow); transition: transform .15s ease}
    .card:hover{transform: translateY(-3px)}
    .card .thumb{display:grid; place-items:center; height:150px}
    .card img{width:140px; height:140px; object-fit:contain; filter: drop-shadow(0 24px 20px rgba(0,0,0,.35))}
    .card .content{padding:12px 14px 14px}
    .id{font-variant-numeric: tabular-nums; font-size:12px; color:var(--muted)}
    .name{font-weight:700; margin:4px 0 8px; letter-spacing:.2px; text-transform:capitalize}
    .types{display:flex; flex-wrap:wrap; gap:6px}
    .type{padding:4px 8px; border-radius:999px; font-size:12px; background:var(--chip); border:1px solid rgba(255,255,255,.08)}

    .footer{max-width:1100px; margin:20px auto 40px; padding:0 20px; color:var(--muted); font-size:13px}
    .pill{display:inline-flex; align-items:center; gap:6px; padding:6px 10px; background:var(--chip); border:1px solid rgba(255,255,255,.08); border-radius:999px}

    /* Type colors (soft) */
    .type.grass{background: rgba(16,185,129,.15); border-color: rgba(16,185,129,.25)}
    .type.fire{background: rgba(244,63,94,.15); border-color: rgba(244,63,94,.25)}
    .type.water{background: rgba(59,130,246,.15); border-color: rgba(59,130,246,.25)}
    .type.bug{background: rgba(132,204,22,.15); border-color: rgba(132,204,22,.25)}
    .type.normal{background: rgba(148,163,184,.15); border-color: rgba(148,163,184,.25)}
    .type.poison{background: rgba(168,85,247,.15); border-color: rgba(168,85,247,.25)}
    .type.electric{background: rgba(250,204,21,.18); border-color: rgba(250,204,21,.3)}
    .type.ground{background: rgba(234,179,8,.18); border-color: rgba(234,179,8,.3)}
    .type.fairy{background: rgba(244,114,182,.15); border-color: rgba(244,114,182,.25)}
    .type.fighting{background: rgba(239,68,68,.15); border-color: rgba(239,68,68,.25)}
    .type.psychic{background: rgba(236,72,153,.15); border-color: rgba(236,72,153,.25)}
    .type.rock{background: rgba(251,191,36,.18); border-color: rgba(251,191,36,.3)}
    .type.ghost{background: rgba(99,102,241,.15); border-color: rgba(99,102,241,.25)}
    .type.ice{background: rgba(14,165,233,.15); border-color: rgba(14,165,233,.25)}
    .type.dragon{background: rgba(37,99,235,.18); border-color: rgba(37,99,235,.3)}

    @media (max-width: 640px){
      .controls{grid-template-columns: 1fr 1fr 1fr 44px}
    }
  </style>
</head>
<body>
  <!--
    ✅ Cómo usar en GitHub Pages
    1) Crea un repo en GitHub, por ejemplo: pokedex-gen1
    2) Sube este archivo como index.html a la raíz del repo.
    3) Activa GitHub Pages (Settings → Pages → Deploy from branch → main / root).
    4) Abre la URL que te entregue GitHub Pages. ¡Listo!

    Notas
    - Los datos se obtienen de PokeAPI (gratuita). Se cachean en localStorage para cargar más rápido la próxima vez.
    - Si la API no responde, se muestra un mensaje de error.
  -->

  <header>
    <div class="wrap">
      <div class="title">
        <div class="ball" aria-hidden="true"></div>
        <h1>Pokédex — Generación 1 <span class="id" style="margin-left:6px">(001–151)</span></h1>
      </div>
      <div class="controls" role="group" aria-label="Controles de la Pokédex">
        <label class="control" title="Buscar por nombre o ID">
          <svg width="18" height="18" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" aria-hidden="true"><path d="M21 21l-4.35-4.35" stroke="currentColor" stroke-width="2" stroke-linecap="round"/><circle cx="10.5" cy="10.5" r="7.5" stroke="currentColor" stroke-width="2"/></svg>
          <input id="q" type="search" placeholder="Buscar: pikachu, 25, bulba..." autocomplete="off"/>
        </label>
        <label class="control">
          <select id="typeFilter" title="Filtrar por tipo">
            <option value="">Todos los tipos</option>
          </select>
        </label>
        <label class="control">
          <select id="sortBy" title="Ordenar resultados">
            <option value="id-asc">ID ascendente</option>
            <option value="id-desc">ID descendente</option>
            <option value="name-asc">Nombre A→Z</option>
            <option value="name-desc">Nombre Z→A</option>
          </select>
        </label>
        <button id="mode" class="btn" title="Cambiar tema (claro/oscuro)">☾</button>
      </div>
    </div>
  </header>

  <main>
    <section id="grid" class="grid" aria-live="polite"></section>
    <div class="footer wrap">
      <span class="pill" id="count">Cargando...</span>
    </div>
  </main>

  <template id="card-tpl">
    <article class="card" tabindex="0" role="article">
      <div class="thumb"><img alt="Sprite del Pokémon" loading="lazy" decoding="async" /></div>
      <div class="content">
        <div class="id">#000</div>
        <div class="name">bulbasaur</div>
        <div class="types"></div>
      </div>
    </article>
  </template>

  <script>
    // --------- Utilidades ---------
    const $$ = sel => document.querySelector(sel);
    const pad3 = n => String(n).padStart(3, '0');
    const capitalize = s => s.charAt(0).toUpperCase() + s.slice(1);

    // Modo (oscuro/ligero)
    const storedTheme = localStorage.getItem('theme');
    if (storedTheme === 'light') document.documentElement.classList.add('light');
    $$('#mode').textContent = document.documentElement.classList.contains('light') ? '☀' : '☾';
    $$('#mode').addEventListener('click', () => {
      document.documentElement.classList.toggle('light');
      const isLight = document.documentElement.classList.contains('light');
      localStorage.setItem('theme', isLight ? 'light' : 'dark');
      $$('#mode').textContent = isLight ? '☀' : '☾';
    });

    // Lazy images con IntersectionObserver
    const lazyObserver = new IntersectionObserver((entries) => {
      entries.forEach(e => {
        if (e.isIntersecting) {
          const img = e.target;
          const src = img.getAttribute('data-src');
          if (src) { img.src = src; img.removeAttribute('data-src'); }
          lazyObserver.unobserve(img);
        }
      })
    }, {rootMargin: '200px'});

    // --------- Datos ---------
    const API = 'https://pokeapi.co/api/v2';
    const LIMIT = 151; // Gen 1

    async function fetchJSON(url){
      const r = await fetch(url);
      if(!r.ok) throw new Error('HTTP '+r.status);
      return r.json();
    }

    function cacheGet(key){
      try{ return JSON.parse(localStorage.getItem(key)); }catch{ return null }
    }
    function cacheSet(key,val){
      try{ localStorage.setItem(key, JSON.stringify(val)); }catch{}
    }

    async function loadAllPokemon(){
      // Intenta desde cache primero
      const cached = cacheGet('gen1');
      if (cached && Array.isArray(cached) && cached.length === LIMIT) {
        return cached;
      }

      // 1) Lista básica
      const list = await fetchJSON(`${API}/pokemon?limit=${LIMIT}&offset=0`);
      const urls = list.results.map(p => p.url);

      // 2) Descarga en lotes para no saturar
      const batchSize = 25;
      const details = [];
      for (let i=0; i<urls.length; i+=batchSize){
        const slice = urls.slice(i, i+batchSize);
        const chunk = await Promise.all(slice.map(u => fetchJSON(u)));
        details.push(...chunk);
      }

      // 3) Normaliza datos mínimos
      const normalized = details
        .sort((a,b)=>a.id - b.id)
        .map(d => ({
          id: d.id,
          name: d.name,
          types: d.types.map(t=>t.type.name),
          sprite: d.sprites.other?.['official-artwork']?.front_default || d.sprites.front_default || '',
        }));

      cacheSet('gen1', normalized);
      return normalized;
    }

    // --------- Render ---------
    let POKEMON = [];

    function render(list){
      const grid = $$('#grid');
      grid.innerHTML = '';
      const tpl = $$('#card-tpl');

      list.forEach(p => {
        const node = tpl.content.cloneNode(true);
        const el = node.querySelector('.card');
        el.setAttribute('aria-label', `#${pad3(p.id)} ${capitalize(p.name)}`);
        node.querySelector('.id').textContent = `#${pad3(p.id)}`;
        node.querySelector('.name').textContent = capitalize(p.name);
        const img = node.querySelector('img');
        img.alt = `Sprite de ${p.name}`;
        img.setAttribute('data-src', p.sprite);
        lazyObserver.observe(img);

        const types = node.querySelector('.types');
        p.types.forEach(t => {
          const span = document.createElement('span');
          span.className = `type ${t}`;
          span.textContent = capitalize(t);
          types.appendChild(span);
        });
        grid.appendChild(node);
      });

      $$('#count').textContent = `${list.length} / ${POKEMON.length} mostrados`;
    }

    function applyFilters(){
      const q = $$('#q').value.trim().toLowerCase();
      const type = $$('#typeFilter').value;
      const sort = $$('#sortBy').value;

      let list = POKEMON.filter(p => {
        const matchQ = !q || p.name.includes(q) || String(p.id) === q;
        const matchT = !type || p.types.includes(type);
        return matchQ && matchT;
      });

      switch(sort){
        case 'id-desc': list.sort((a,b)=>b.id-a.id); break;
        case 'name-asc': list.sort((a,b)=> a.name.localeCompare(b.name)); break;
        case 'name-desc': list.sort((a,b)=> b.name.localeCompare(a.name)); break;
        default: list.sort((a,b)=>a.id-b.id);
      }

      render(list);
    }

    function initTypeFilter(){
      const select = $$('#typeFilter');
      const set = new Set();
      POKEMON.forEach(p => p.types.forEach(t => set.add(t)));
      const types = Array.from(set).sort();
      types.forEach(t => {
        const opt = document.createElement('option');
        opt.value = t; opt.textContent = capitalize(t);
        select.appendChild(opt);
      });
    }

    // Eventos
    $$('#q').addEventListener('input', applyFilters);
    $$('#typeFilter').addEventListener('change', applyFilters);
    $$('#sortBy').addEventListener('change', applyFilters);

    // Boot
    (async function(){
      try{
        $$('#count').textContent = 'Cargando datos de PokeAPI…';
        POKEMON = await loadAllPokemon();
        initTypeFilter();
        applyFilters();
      }catch(err){
        console.error(err);
        $$('#grid').innerHTML = `<div class="wrap" style="padding:24px">⚠️ Error cargando datos. ¿PokeAPI está caído? Intenta recargar o vuelve más tarde.</div>`;
        $$('#count').textContent = 'Error al cargar.';
      }
    })();
  </script>
</body>
</html>
